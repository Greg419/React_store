{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\f7404\\\\Desktop\\\\react-store\\\\src\\\\components\\\\Products.js\";\nimport React from \"react\";\nimport axios from \"commons/axios\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport ToolBox from \"components/ToolBox\";\nimport Product from \"components/Product\";\nimport Panel from \"components/Panel\";\nimport AddInventory from \"components/AddInventory\";\n\nclass Products extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      sourceProducts: [],\n      cartNum: 0\n    };\n\n    this.search = text => {\n      // 1.copy the Array\n      let _products = [...this.state.sourceProducts]; // 每次 text 有變動時, 都要重抓未被filter過的數組 sourceProducts 來做邏輯判斷\n      // 2.filter the Array\n      // filter() 會回傳一個陣列，其條件是 return 後方為 true 的物件\n      // 滿足 return 條件的 \"p物件\" 才會被存回 _products[]\n\n      _products = _products.filter(p => {\n        // 語法1:\n        // const matchArray = p.name.match(new RegExp(text, 'gi'));\n        // return matchArray !== null;\n        // 語法1.1:\n        return p.name.match(new RegExp(text, \"gi\")); // 語法2:\n        // return p.name.toLowerCase().indexOf(text.toLowerCase()) > -1\n      }); // 3.set State\n\n      this.setState({\n        products: _products\n      });\n    };\n\n    this.toAdd = () => {\n      Panel.open({\n        component: AddInventory,\n        // 會在 Panel.open() 內 綁定到 Panel的 state.callback\n        productsCallback: data => {\n          if (data) {\n            this.add(data);\n          }\n        }\n      });\n    };\n\n    this.add = formData => {\n      const _products = [...this.state.products];\n\n      _products.push(formData);\n\n      const _sProducts = [...this.state.sourceProducts];\n\n      _sProducts.push(formData);\n\n      this.setState({\n        products: _products,\n        sourceProducts: _sProducts\n      });\n    };\n\n    this.update = formData => {\n      const _products = [...this.state.products];\n\n      const _index = _products.findIndex(p => p.id === formData.id); // array 的 index 值為 _index 開始替換, 共替換1個資料, 替換值為 formData\n\n\n      _products.splice(_index, 1, formData);\n\n      const _sProducts = [...this.state.sourceProducts];\n\n      const _sIndex = _products.findIndex(p => p.id === formData.id);\n\n      _sProducts.splice(_sIndex, 1, formData);\n\n      this.setState({\n        products: _products,\n        sourceProducts: _sProducts\n      });\n    };\n\n    this.delete = id => {\n      const _products = this.state.products.filter(p => p.id !== id);\n\n      const _sProducts = this.state.sourceProducts.filter(p => p.id !== id);\n\n      this.setState({\n        products: _products,\n        sourceProducts: _sProducts\n      });\n    };\n\n    this.updateCartNum = async () => {\n      const cartNum = await this.initCartNum();\n      this.setState({\n        cartNum: cartNum\n      });\n    };\n\n    this.initCartNum = async () => {\n      const user = global.auth.getUser() || {}; // get 請求也可以透過發送參數 params, 來作篩選條件\n\n      const res = await axios.get(\"/carts\", {\n        params: {\n          userId: user.email\n        }\n      });\n      const carts = res.data || [];\n      const cartNum = carts.map(cart => cart.mount) // [2, 3, 2]\n      .reduce((a, value) => a + value, 0); // a: 是累加器, 分別將 array 內的元素 value 累加到 a, 初始值為 0\n\n      return cartNum;\n    };\n  }\n\n  // 設置 商品列表 資料來源\n  componentDidMount() {\n    // fetch('http://localhost:3003/products')\n    //     .then(response => response.json())\n    //     .then(data =>{\n    //         this.setState({\n    //             products: data,\n    //             sourceProducts: data\n    //         });\n    //     });\n    axios.get(\"http://localhost:3003/products\").then(response => {\n      this.setState({\n        products: response.data,\n        sourceProducts: response.data\n      });\n    });\n    this.updateCartNum();\n  } // 欲對 products[] 做搜尋邏輯的篩選, 但須抓取 <ToolBox/> 內的 text 輸入值\n  // 故將此 function 傳進 <ToolBox/> 以獲取 handleChange event 的 e.target.value\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(ToolBox, {\n      search: this.search,\n      cartNum: this.state.cartNum,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"products\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"columns is-multiline is-desktop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(TransitionGroup, {\n      component: null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.state.products.map(p => {\n      return (// 注意 這裡是 className\"s\", 且 product-fade 為動態生成 className 的前綴詞\n        React.createElement(CSSTransition, {\n          classNames: \"product-fade\",\n          timeout: {\n            enter: 300,\n            exit: 300\n          },\n          key: p.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"column is-3\",\n          key: p.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(Product, {\n          product: p,\n          update: this.update,\n          delete: this.delete,\n          updateCartNum: this.updateCartNum,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        })))\n      );\n    }))), (global.auth.getUser() || {}).type === 1 && React.createElement(\"button\", {\n      className: \"button is-primary add-btn\",\n      onClick: this.toAdd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"add\")));\n  }\n\n}\n\nexport default Products;","map":{"version":3,"sources":["C:/Users/f7404/Desktop/react-store/src/components/Products.js"],"names":["React","axios","TransitionGroup","CSSTransition","ToolBox","Product","Panel","AddInventory","Products","Component","state","products","sourceProducts","cartNum","search","text","_products","filter","p","name","match","RegExp","setState","toAdd","open","component","productsCallback","data","add","formData","push","_sProducts","update","_index","findIndex","id","splice","_sIndex","delete","updateCartNum","initCartNum","user","global","auth","getUser","res","get","params","userId","email","carts","map","cart","mount","reduce","a","value","componentDidMount","then","response","render","enter","exit","type"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"commons/axios\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport ToolBox from \"components/ToolBox\";\r\nimport Product from \"components/Product\";\r\nimport Panel from \"components/Panel\";\r\nimport AddInventory from \"components/AddInventory\";\r\n\r\nclass Products extends React.Component {\r\n  // 將商品列表 設為受控組件\r\n  state = {\r\n    products: [],\r\n    sourceProducts: [],\r\n    cartNum: 0\r\n  };\r\n\r\n  // 設置 商品列表 資料來源\r\n  componentDidMount() {\r\n    // fetch('http://localhost:3003/products')\r\n    //     .then(response => response.json())\r\n    //     .then(data =>{\r\n    //         this.setState({\r\n    //             products: data,\r\n    //             sourceProducts: data\r\n    //         });\r\n    //     });\r\n\r\n    axios.get(\"http://localhost:3003/products\").then(response => {\r\n      this.setState({\r\n        products: response.data,\r\n        sourceProducts: response.data\r\n      });\r\n    });\r\n\r\n    this.updateCartNum();\r\n  }\r\n\r\n  // 欲對 products[] 做搜尋邏輯的篩選, 但須抓取 <ToolBox/> 內的 text 輸入值\r\n  // 故將此 function 傳進 <ToolBox/> 以獲取 handleChange event 的 e.target.value\r\n  search = text => {\r\n    // 1.copy the Array\r\n    let _products = [...this.state.sourceProducts];\r\n    // 每次 text 有變動時, 都要重抓未被filter過的數組 sourceProducts 來做邏輯判斷\r\n\r\n    // 2.filter the Array\r\n\r\n    // filter() 會回傳一個陣列，其條件是 return 後方為 true 的物件\r\n    // 滿足 return 條件的 \"p物件\" 才會被存回 _products[]\r\n    _products = _products.filter(p => {\r\n      // 語法1:\r\n      // const matchArray = p.name.match(new RegExp(text, 'gi'));\r\n      // return matchArray !== null;\r\n\r\n      // 語法1.1:\r\n      return p.name.match(new RegExp(text, \"gi\"));\r\n\r\n      // 語法2:\r\n      // return p.name.toLowerCase().indexOf(text.toLowerCase()) > -1\r\n    });\r\n\r\n    // 3.set State\r\n    this.setState({\r\n      products: _products\r\n    });\r\n  };\r\n\r\n  // 調用者跟彈出層唯一有鏈結的地方, 所以底下要將參數得傳上來透過這裡的 callback()\r\n  toAdd = () => {\r\n    Panel.open({\r\n      component: AddInventory,\r\n      // 會在 Panel.open() 內 綁定到 Panel的 state.callback\r\n      productsCallback: data => {\r\n        if (data) {\r\n          this.add(data);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  add = formData => {\r\n    const _products = [...this.state.products];\r\n    _products.push(formData);\r\n\r\n    const _sProducts = [...this.state.sourceProducts];\r\n    _sProducts.push(formData);\r\n\r\n    this.setState({\r\n      products: _products,\r\n      sourceProducts: _sProducts\r\n    });\r\n  };\r\n\r\n  update = formData => {\r\n    const _products = [...this.state.products];\r\n    const _index = _products.findIndex(p => p.id === formData.id);\r\n    // array 的 index 值為 _index 開始替換, 共替換1個資料, 替換值為 formData\r\n    _products.splice(_index, 1, formData);\r\n\r\n    const _sProducts = [...this.state.sourceProducts];\r\n    const _sIndex = _products.findIndex(p => p.id === formData.id);\r\n    _sProducts.splice(_sIndex, 1, formData);\r\n\r\n    this.setState({\r\n      products: _products,\r\n      sourceProducts: _sProducts\r\n    });\r\n  };\r\n\r\n  // 於 <Product/> 內刪除產品後, 會將該產品的 id 傳出來, 做畫面同步渲染\r\n  delete = id => {\r\n    const _products = this.state.products.filter(p => p.id !== id);\r\n    const _sProducts = this.state.sourceProducts.filter(p => p.id !== id);\r\n    this.setState({\r\n      products: _products,\r\n      sourceProducts: _sProducts\r\n    });\r\n  };\r\n\r\n  updateCartNum = async () => {\r\n    const cartNum = await this.initCartNum();\r\n    this.setState({\r\n      cartNum: cartNum\r\n    });\r\n  };\r\n\r\n  initCartNum = async () => {\r\n    const user = global.auth.getUser() || {};\r\n    // get 請求也可以透過發送參數 params, 來作篩選條件\r\n    const res = await axios.get(\"/carts\", {\r\n      params: {\r\n        userId: user.email\r\n      }\r\n    });\r\n    const carts = res.data || [];\r\n    const cartNum = carts\r\n      .map(cart => cart.mount) // [2, 3, 2]\r\n      .reduce((a, value) => a + value, 0); // a: 是累加器, 分別將 array 內的元素 value 累加到 a, 初始值為 0\r\n    return cartNum;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* 將 state.products 傳進<ToolBox/>做搜尋邏輯判斷並修改, \r\n                    而 state.products 一有變動就會重新渲染UI */}\r\n        <ToolBox search={this.search} cartNum={this.state.cartNum} />\r\n        <div className=\"products\">\r\n          {/* 套用 Bulma -> Columns */}\r\n          <div className=\"columns is-multiline is-desktop\">\r\n            {/* TransitionGroup: <<<< 做動畫的組件 >>>>\r\n                            <TransitionGroup> 會預設一個空的 <div>, 影響我們原本的布局, 需透過 component={null} 將其移除 */}\r\n            <TransitionGroup component={null}>\r\n              {this.state.products.map(p => {\r\n                return (\r\n                  // 注意 這裡是 className\"s\", 且 product-fade 為動態生成 className 的前綴詞\r\n                  <CSSTransition\r\n                    classNames=\"product-fade\"\r\n                    timeout={{ enter: 300, exit: 300 }}\r\n                    key={p.id}\r\n                  >\r\n                    <div className=\"column is-3\" key={p.id}>\r\n                      <Product\r\n                        product={p}\r\n                        update={this.update}\r\n                        delete={this.delete}\r\n                        updateCartNum={this.updateCartNum}\r\n                      />\r\n                    </div>\r\n                  </CSSTransition>\r\n                );\r\n              })}\r\n            </TransitionGroup>\r\n          </div>\r\n          {/* 若getUser有抓到登入者資料, 判斷其 type 值為1(管理者), add按鈕就會被渲染出來 */}\r\n          {(global.auth.getUser() || {}).type === 1 && (\r\n            <button className=\"button is-primary add-btn\" onClick={this.toAdd}>\r\n              add\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Products;\r\n"]},"metadata":{},"sourceType":"module"}