{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\f7404\\\\Desktop\\\\react-store\\\\src\\\\components\\\\Panel.js\";\n\n/*\r\n    1.一次渲染\r\n    2.隨需調用\r\n        (1) 子組件作為參數並被渲染\r\n        (2) 子組件可以關閉彈出層\r\n        (3) 子組件與調用者<Products/>可以通訊\r\n*/\nimport React from 'react'; // { render } 用來直接將此組件渲染出來\n\nimport { render } from 'react-dom';\n\nclass Panel extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      active: false,\n      component: null,\n      callback: () => {}\n    };\n\n    this.open = ( // 設定傳遞進來的參數之初始值\n    options = {\n      props: {},\n      component: null,\n      productsCallback: () => {}\n    }) => {\n      // 解構傳進來的參數\n      const {\n        props,\n        component,\n        productsCallback\n      } = options; // 以時間戳為組件的key值, 每次關閉再打開時, <AddInventory /> 內容都會因為不同的 key 而被清空\n\n      const _key = new Date().getTime(); // 將傳遞進來的構造函數 component(AddInventory), 需轉透過 createElement 換成可渲染的組件實例\n      // ps. 此處會把 this.close() 及 ...props 傳遞給子組件 component\n\n\n      const _component = React.createElement(component, { ...props,\n        close: this.close,\n        key: _key\n      });\n\n      this.setState({\n        active: true,\n        component: _component,\n        callback: productsCallback // 把 Products/Product 的 productsCallback 跟 this.state.callback 串起來, this.close 就可以透過 state.callback 傳參數上去\n\n      });\n    };\n\n    this.close = data => {\n      // console.log(\"close() datta is: \", data);\n      this.setState({\n        active: false\n      });\n      this.state.callback(data); // 此處 callback 是綁到父層的 function, 所以透過 close() 可以將子組件的的參數 data 再往上傳到 <Products/>\n    };\n  }\n\n  render() {\n    const _class = {\n      true: 'panel-wrapper active',\n      false: 'panel-wrapper'\n    }; // panel-wrapper: 整個畫面, over-layer: 左半邊半透明區塊, panel:右半邊我們要的資料輸入快\n\n    return React.createElement(\"div\", {\n      className: _class[this.state.active],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"over-layer\",\n      onClick: () => {\n        this.close();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"panel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"close\",\n      onClick: () => {\n        this.close();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"X\"), this.state.component)));\n  }\n\n} // 生成一個 div, 並append到 body 內\n\n\nconst _div = document.createElement('div');\n\ndocument.body.appendChild(_div); // 最後將 <Panel/> 渲染結果塞進該 div\n\nconst _panel = render(React.createElement(Panel, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88\n  },\n  __self: this\n}), _div); // render 會回傳一個最終的實例對象, 可供其他 component 調用此實例對象內的方法\n\n\nexport default _panel;","map":{"version":3,"sources":["C:/Users/f7404/Desktop/react-store/src/components/Panel.js"],"names":["React","render","Panel","Component","state","active","component","callback","open","options","props","productsCallback","_key","Date","getTime","_component","createElement","close","key","setState","data","_class","true","false","_div","document","body","appendChild","_panel"],"mappings":";;AAAA;;;;;;;AAQA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACzB;AACHC,MAAAA,MAAM,EAAE,KADL;AAEHC,MAAAA,SAAS,EAAE,IAFR;AAGHC,MAAAA,QAAQ,EAAE,MAAM,CAAE;AAHf,KADyB;;AAAA,SAOhCC,IAPgC,GAOzB,EAEH;AACAC,IAAAA,OAAO,GAAG;AACNC,MAAAA,KAAK,EAAC,EADA;AAENJ,MAAAA,SAAS,EAAE,IAFL;AAGNK,MAAAA,gBAAgB,EAAE,MAAI,CAAE;AAHlB,KAHP,KASF;AACD;AACA,YAAM;AAAED,QAAAA,KAAF;AAASJ,QAAAA,SAAT;AAAoBK,QAAAA;AAApB,UAAyCF,OAA/C,CAFC,CAID;;AACA,YAAMG,IAAI,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAb,CALC,CAOD;AACA;;;AACA,YAAMC,UAAU,GAAGf,KAAK,CAACgB,aAAN,CAAoBV,SAApB,EAA+B,EAC9C,GAAGI,KAD2C;AAE9CO,QAAAA,KAAK,EAAE,KAAKA,KAFkC;AAG9CC,QAAAA,GAAG,EAACN;AAH0C,OAA/B,CAAnB;;AAMA,WAAKO,QAAL,CAAc;AACVd,QAAAA,MAAM,EAAE,IADE;AAEVC,QAAAA,SAAS,EAAES,UAFD;AAGVR,QAAAA,QAAQ,EAAEI,gBAHA,CAIV;;AAJU,OAAd;AAMH,KArC+B;;AAAA,SAwChCM,KAxCgC,GAwCxBG,IAAI,IAAI;AACZ;AACA,WAAKD,QAAL,CAAc;AACTd,QAAAA,MAAM,EAAE;AADC,OAAd;AAGA,WAAKD,KAAL,CAAWG,QAAX,CAAoBa,IAApB,EALY,CAKe;AAC9B,KA9C+B;AAAA;;AAgDhCnB,EAAAA,MAAM,GAAI;AACN,UAAMoB,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAE,sBADK;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAf,CADM,CAKN;;AACA,WACI;AAAK,MAAA,SAAS,EAAGF,MAAM,CAAC,KAAKjB,KAAL,CAAWC,MAAZ,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,OAAO,EAAE,MAAI;AAAC,aAAKY,KAAL;AAAa,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAwB,MAAA,OAAO,EAAE,MAAI;AAAC,aAAKA,KAAL;AAAa,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHJ,EAIK,KAAKb,KAAL,CAAWE,SAJhB,CADJ,CAFJ,CADJ;AAaH;;AAnE+B,C,CAsEpC;;;AACA,MAAMkB,IAAI,GAAGC,QAAQ,CAACT,aAAT,CAAuB,KAAvB,CAAb;;AACAS,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BH,IAA1B,E,CAEA;;AACA,MAAMI,MAAM,GAAG3B,MAAM,CAAC,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAD,EAAYuB,IAAZ,CAArB,C,CAEA;;;AACA,eAAeI,MAAf","sourcesContent":["/*\r\n    1.一次渲染\r\n    2.隨需調用\r\n        (1) 子組件作為參數並被渲染\r\n        (2) 子組件可以關閉彈出層\r\n        (3) 子組件與調用者<Products/>可以通訊\r\n*/\r\n\r\nimport React from 'react'\r\n// { render } 用來直接將此組件渲染出來\r\nimport { render } from 'react-dom'\r\n\r\nclass Panel extends React.Component {\r\n    state ={\r\n        active: false,\r\n        component: null,\r\n        callback: () => {}\r\n    }\r\n\r\n    open = (\r\n\r\n        // 設定傳遞進來的參數之初始值\r\n        options = {\r\n            props:{},\r\n            component: null,\r\n            productsCallback: ()=>{}\r\n        }\r\n\r\n    ) => {\r\n        // 解構傳進來的參數\r\n        const { props, component, productsCallback } = options;\r\n\r\n        // 以時間戳為組件的key值, 每次關閉再打開時, <AddInventory /> 內容都會因為不同的 key 而被清空\r\n        const _key = new Date().getTime()\r\n        \r\n        // 將傳遞進來的構造函數 component(AddInventory), 需轉透過 createElement 換成可渲染的組件實例\r\n        // ps. 此處會把 this.close() 及 ...props 傳遞給子組件 component\r\n        const _component = React.createElement(component, { \r\n            ...props,\r\n            close: this.close, \r\n            key:_key \r\n        });\r\n\r\n        this.setState({\r\n            active: true,\r\n            component: _component,\r\n            callback: productsCallback \r\n            // 把 Products/Product 的 productsCallback 跟 this.state.callback 串起來, this.close 就可以透過 state.callback 傳參數上去\r\n        })\r\n    }\r\n\r\n    // 關閉彈出視窗時接收 <AddInventory/> 的 data\r\n    close = data => {\r\n        // console.log(\"close() datta is: \", data);\r\n        this.setState({\r\n             active: false\r\n        })\r\n        this.state.callback(data); // 此處 callback 是綁到父層的 function, 所以透過 close() 可以將子組件的的參數 data 再往上傳到 <Products/>\r\n    }\r\n\r\n    render () {\r\n        const _class = {\r\n            true: 'panel-wrapper active',\r\n            false: 'panel-wrapper'\r\n        }\r\n        // panel-wrapper: 整個畫面, over-layer: 左半邊半透明區塊, panel:右半邊我們要的資料輸入快\r\n        return (\r\n            <div className={ _class[this.state.active] }>\r\n                <div className=\"over-layer\" onClick={()=>{this.close()}}></div>\r\n                <div className=\"panel\">\r\n                    <div className=\"head\">\r\n                        {/* 若用 onClick={this.close} 的話, 會回傳一個 class 給 this.close(), 導致close()內判斷 if(data) 時為true */}\r\n                        {/* <div className=\"over-layer\" onClick={this.close}></div> */}\r\n                        <span className=\"close\" onClick={()=>{this.close()}}>X</span>\r\n                        {this.state.component}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// 生成一個 div, 並append到 body 內\r\nconst _div = document.createElement('div')\r\ndocument.body.appendChild(_div)\r\n\r\n// 最後將 <Panel/> 渲染結果塞進該 div\r\nconst _panel = render(<Panel />, _div);\r\n\r\n// render 會回傳一個最終的實例對象, 可供其他 component 調用此實例對象內的方法\r\nexport default _panel;"]},"metadata":{},"sourceType":"module"}