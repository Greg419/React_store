{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\f7404\\\\Desktop\\\\react-store\\\\src\\\\pages\\\\Cart.js\";\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport axios from 'commons/axios';\nimport Layout from 'Layout';\nimport CartItem from 'components/CartItem';\nimport { formatPrice } from 'commons/helper';\n\nconst Cart = () => {\n  // 使用 Hook 於非 class 內設定 state參數/setState函式\n  const [carts, setCarts] = useState([]); // uesEffect 會於 render() 後被執行, 相當於 ComponentDidMount\n\n  useEffect(() => {\n    const user = global.auth.getUser() || {};\n    axios.get(`/carts?userId=${user.email}`).then(res => setCarts(res.data)); // 只抓有登入的使用者的 carts\n  }, []); // 第二個參數需傳空的 [], 若是傳入 carts[], 只要carts 一被更動就會再重新 invoke useEffect() 造成無限循環\n  // useMemo: 傳遞一個「建立」function 及依賴 array。\n  // useMemo 只會在依賴(carts)改變時才重新計算 memoized 的值。\n\n  const totalPrice = useMemo(() => {\n    const totalPrice = carts.map(cart => cart.mount * parseInt(cart.price)) // 先算出各個單品的總和(單品數量*單價)\n    .reduce((acc, value) => acc + value, 0); // 再累加 map[] 裡的各個單品總和, 算出購物車總價\n\n    return formatPrice(totalPrice);\n  }, [carts]); // 接收 CartItem 修改mount後的產品資料, 以重新渲染畫面\n\n  const updateCart = cart => {\n    const newCarts = [...carts];\n\n    const _index = newCarts.findIndex(c => c.id === cart.id);\n\n    newCarts.splice(_index, 1, cart); // 將 cart 寫回 carts[] \n\n    setCarts(newCarts);\n  }; // Cart.js 刪除完 REST API 後, 透過此 function 來更動 state.carts 達到重新渲染畫面的目的\n\n\n  const deleteCart = cart => {\n    const _carts = carts.filter(c => c.id !== cart.id);\n\n    setCarts(_carts);\n  };\n\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cart-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"cart-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Shopping Cart\"), React.createElement(\"div\", {\n    className: \"cart-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(TransitionGroup, {\n    component: null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, carts.map(cart => React.createElement(CSSTransition, {\n    classNames: \"cart-item\",\n    timeout: 500,\n    key: cart.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(CartItem, {\n    key: cart.id,\n    cart: cart,\n    updateCart: updateCart,\n    deleteCart: deleteCart,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }))))), carts.length === 0 ? React.createElement(\"p\", {\n    className: \"no-cart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"NO GOODS\") : \"\", React.createElement(\"div\", {\n    className: \"cart-total\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Total:\", React.createElement(\"span\", {\n    className: \"total-price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, totalPrice))));\n};\n\nexport default Cart;","map":{"version":3,"sources":["C:/Users/f7404/Desktop/react-store/src/pages/Cart.js"],"names":["React","useState","useEffect","useMemo","TransitionGroup","CSSTransition","axios","Layout","CartItem","formatPrice","Cart","carts","setCarts","user","global","auth","getUser","get","email","then","res","data","totalPrice","map","cart","mount","parseInt","price","reduce","acc","value","updateCart","newCarts","_index","findIndex","c","id","splice","deleteCart","_carts","filter","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,wBAA/C;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC,CAFe,CAIf;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYC,OAAZ,MAAyB,EAAtC;AACAV,IAAAA,KAAK,CAACW,GAAN,CAAW,iBAAgBJ,IAAI,CAACK,KAAM,EAAtC,EAAyCC,IAAzC,CAA8CC,GAAG,IAAIR,QAAQ,CAACQ,GAAG,CAACC,IAAL,CAA7D,EAFY,CAE8D;AAC7E,GAHQ,EAGN,EAHM,CAAT,CALe,CASf;AAGA;AACA;;AACA,QAAMC,UAAU,GAAGnB,OAAO,CAAC,MAAM;AAC7B,UAAMmB,UAAU,GAAGX,KAAK,CACnBY,GADc,CACVC,IAAI,IAAIA,IAAI,CAACC,KAAL,GAAaC,QAAQ,CAACF,IAAI,CAACG,KAAN,CADnB,EACiC;AADjC,KAEdC,MAFc,CAEP,CAACC,GAAD,EAAMC,KAAN,KAAgBD,GAAG,GAAGC,KAFf,EAEsB,CAFtB,CAAnB,CAD6B,CAGgB;;AAC7C,WAAOrB,WAAW,CAACa,UAAD,CAAlB;AACH,GALyB,EAKvB,CAACX,KAAD,CALuB,CAA1B,CAde,CAqBf;;AACA,QAAMoB,UAAU,GAAGP,IAAI,IAAI;AACvB,UAAMQ,QAAQ,GAAG,CAAC,GAAGrB,KAAJ,CAAjB;;AACA,UAAMsB,MAAM,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASZ,IAAI,CAACY,EAAtC,CAAf;;AACAJ,IAAAA,QAAQ,CAACK,MAAT,CAAgBJ,MAAhB,EAAwB,CAAxB,EAA2BT,IAA3B,EAHuB,CAGU;;AACjCZ,IAAAA,QAAQ,CAACoB,QAAD,CAAR;AACH,GALD,CAtBe,CA6Bf;;;AACA,QAAMM,UAAU,GAAGd,IAAI,IAAI;AACvB,UAAMe,MAAM,GAAG5B,KAAK,CAAC6B,MAAN,CAAaL,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASZ,IAAI,CAACY,EAAhC,CAAf;;AACAxB,IAAAA,QAAQ,CAAC2B,MAAD,CAAR;AACH,GAHD;;AAKA,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAE,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK5B,KAAK,CAACY,GAAN,CAAUC,IAAI,IACX,oBAAC,aAAD;AAAe,IAAA,UAAU,EAAC,WAA1B;AAAsC,IAAA,OAAO,EAAE,GAA/C;AAAoD,IAAA,GAAG,EAAEA,IAAI,CAACY,EAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AACI,IAAA,GAAG,EAAEZ,IAAI,CAACY,EADd;AAEI,IAAA,IAAI,EAAEZ,IAFV;AAGI,IAAA,UAAU,EAAEO,UAHhB;AAII,IAAA,UAAU,EAAEO,UAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADH,CADL,CADJ,CAFJ,EAiBQ3B,KAAK,CAAC8B,MAAN,KAAiB,CAAjB,GAAqB;AAAG,IAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAArB,GAA2D,EAjBnE,EAmBI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEI;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BnB,UAA/B,CAFJ,CAnBJ,CADJ,CADJ;AA4BH,CA/DD;;AAiEA,eAAeZ,IAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\nimport axios from 'commons/axios'\r\nimport Layout from 'Layout'\r\nimport CartItem from 'components/CartItem'\r\nimport { formatPrice } from 'commons/helper';\r\n\r\nconst Cart = () => {\r\n    // 使用 Hook 於非 class 內設定 state參數/setState函式\r\n    const [carts, setCarts] = useState([]);\r\n\r\n    // uesEffect 會於 render() 後被執行, 相當於 ComponentDidMount\r\n    useEffect(() => {\r\n        const user = global.auth.getUser() || {};\r\n        axios.get(`/carts?userId=${user.email}`).then(res => setCarts(res.data)); // 只抓有登入的使用者的 carts\r\n    }, []); \r\n    // 第二個參數需傳空的 [], 若是傳入 carts[], 只要carts 一被更動就會再重新 invoke useEffect() 造成無限循環\r\n\r\n\r\n    // useMemo: 傳遞一個「建立」function 及依賴 array。\r\n    // useMemo 只會在依賴(carts)改變時才重新計算 memoized 的值。\r\n    const totalPrice = useMemo(() => {\r\n        const totalPrice = carts\r\n            .map(cart => cart.mount * parseInt(cart.price)) // 先算出各個單品的總和(單品數量*單價)\r\n            .reduce((acc, value) => acc + value, 0); // 再累加 map[] 裡的各個單品總和, 算出購物車總價\r\n        return formatPrice(totalPrice)\r\n    }, [carts]);\r\n\r\n    // 接收 CartItem 修改mount後的產品資料, 以重新渲染畫面\r\n    const updateCart = cart => {\r\n        const newCarts = [...carts];\r\n        const _index = newCarts.findIndex(c => c.id === cart.id);\r\n        newCarts.splice(_index, 1, cart) // 將 cart 寫回 carts[] \r\n        setCarts(newCarts);\r\n    };\r\n\r\n    // Cart.js 刪除完 REST API 後, 透過此 function 來更動 state.carts 達到重新渲染畫面的目的\r\n    const deleteCart = cart => {\r\n        const _carts = carts.filter(c => c.id !== cart.id);\r\n        setCarts(_carts);\r\n    };\r\n\r\n    return(\r\n        <Layout>\r\n            <div className=\"cart-page\">\r\n                <span className=\"cart-title\">Shopping Cart</span>\r\n                <div className=\"cart-list\">\r\n                    <TransitionGroup component={null}>\r\n                        {carts.map(cart => (\r\n                            <CSSTransition classNames=\"cart-item\" timeout={500} key={cart.id}>\r\n                                <CartItem \r\n                                    key={cart.id} \r\n                                    cart={cart} \r\n                                    updateCart={updateCart} \r\n                                    deleteCart={deleteCart}\r\n                                />\r\n                            </CSSTransition>\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </div>\r\n                {\r\n                    carts.length === 0 ? <p className=\"no-cart\">NO GOODS</p> : \"\"\r\n                }\r\n                <div className=\"cart-total\">\r\n                    Total:\r\n                    <span className=\"total-price\">{totalPrice}</span>\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Cart;"]},"metadata":{},"sourceType":"module"}