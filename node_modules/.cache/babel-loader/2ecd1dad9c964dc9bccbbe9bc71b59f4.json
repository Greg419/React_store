{"ast":null,"code":"import decode from \"jwt-decode\";\nconst JWT = \"store_token_id\"; // Login.js 判斷登入成功後, 以 JWT 為 key值, 將Token存入 localStorage\n\nconst setToken = token => {\n  localStorage.setItem(JWT, token);\n}; // 以 JWT 為 key值取出 token\n\n\nconst getToken = token => {\n  return localStorage.getItem(JWT);\n};\n\nconst isLogin = () => {\n  const jwToken = getToken(); // 抓得到 Token 表示使用者有登入 ==> !!jwToken 為 true\n\n  return !!jwToken && !isTokenExpired(jwToken);\n}; // 判斷 token 是否逾期\n\n\nconst isTokenExpired = token => {\n  try {\n    const _info = decode(token); // token.exp 時間戳小於當前時間 表示已預期\n\n\n    if (_info.exp < Date.now() / 1000) {\n      return true;\n    } else return false;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst getUser = () => {\n  const jwToken = getToken();\n\n  if (isLogin()) {\n    const user = decode(jwToken);\n    return user;\n  } else {\n    return null;\n  }\n}; // 予 UserProfile 的 Logout btn 登出用\n\n\nconst logout = () => {\n  localStorage.removeItem(JWT);\n}; // global 取代 export: 於其他 component 不須import 即可使用\n\n\nglobal.auth = {\n  setToken,\n  getToken,\n  getUser,\n  isLogin,\n  logout\n};","map":{"version":3,"sources":["C:/Users/f7404/Desktop/react-store/src/commons/auth.js"],"names":["decode","JWT","setToken","token","localStorage","setItem","getToken","getItem","isLogin","jwToken","isTokenExpired","_info","exp","Date","now","error","getUser","user","logout","removeItem","global","auth"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;AAEA,MAAMC,GAAG,GAAG,gBAAZ,C,CAEA;;AACA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxBC,EAAAA,YAAY,CAACC,OAAb,CAAqBJ,GAArB,EAA0BE,KAA1B;AACD,CAFD,C,CAIA;;;AACA,MAAMG,QAAQ,GAAGH,KAAK,IAAI;AACxB,SAAOC,YAAY,CAACG,OAAb,CAAqBN,GAArB,CAAP;AACD,CAFD;;AAIA,MAAMO,OAAO,GAAG,MAAM;AACpB,QAAMC,OAAO,GAAGH,QAAQ,EAAxB,CADoB,CAEpB;;AACA,SAAO,CAAC,CAACG,OAAF,IAAa,CAACC,cAAc,CAACD,OAAD,CAAnC;AACD,CAJD,C,CAMA;;;AACA,MAAMC,cAAc,GAAGP,KAAK,IAAI;AAC9B,MAAI;AACF,UAAMQ,KAAK,GAAGX,MAAM,CAACG,KAAD,CAApB,CADE,CAEF;;;AACA,QAAIQ,KAAK,CAACC,GAAN,GAAYC,IAAI,CAACC,GAAL,KAAa,IAA7B,EAAmC;AACjC,aAAO,IAAP;AACD,KAFD,MAEO,OAAO,KAAP;AACR,GAND,CAME,OAAOC,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AACF,CAVD;;AAYA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMP,OAAO,GAAGH,QAAQ,EAAxB;;AACA,MAAIE,OAAO,EAAX,EAAe;AACb,UAAMS,IAAI,GAAGjB,MAAM,CAACS,OAAD,CAAnB;AACA,WAAOQ,IAAP;AACD,GAHD,MAGO;AACL,WAAO,IAAP;AACD;AACF,CARD,C,CAUA;;;AACA,MAAMC,MAAM,GAAG,MAAM;AACnBd,EAAAA,YAAY,CAACe,UAAb,CAAwBlB,GAAxB;AACD,CAFD,C,CAIA;;;AACAmB,MAAM,CAACC,IAAP,GAAc;AACZnB,EAAAA,QADY;AAEZI,EAAAA,QAFY;AAGZU,EAAAA,OAHY;AAIZR,EAAAA,OAJY;AAKZU,EAAAA;AALY,CAAd","sourcesContent":["import decode from \"jwt-decode\";\r\n\r\nconst JWT = \"store_token_id\";\r\n\r\n// Login.js 判斷登入成功後, 以 JWT 為 key值, 將Token存入 localStorage\r\nconst setToken = token => {\r\n  localStorage.setItem(JWT, token);\r\n};\r\n\r\n// 以 JWT 為 key值取出 token\r\nconst getToken = token => {\r\n  return localStorage.getItem(JWT);\r\n};\r\n\r\nconst isLogin = () => {\r\n  const jwToken = getToken();\r\n  // 抓得到 Token 表示使用者有登入 ==> !!jwToken 為 true\r\n  return !!jwToken && !isTokenExpired(jwToken);\r\n};\r\n\r\n// 判斷 token 是否逾期\r\nconst isTokenExpired = token => {\r\n  try {\r\n    const _info = decode(token);\r\n    // token.exp 時間戳小於當前時間 表示已預期\r\n    if (_info.exp < Date.now() / 1000) {\r\n      return true;\r\n    } else return false;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst getUser = () => {\r\n  const jwToken = getToken();\r\n  if (isLogin()) {\r\n    const user = decode(jwToken);\r\n    return user;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\n// 予 UserProfile 的 Logout btn 登出用\r\nconst logout = () => {\r\n  localStorage.removeItem(JWT);\r\n}\r\n\r\n// global 取代 export: 於其他 component 不須import 即可使用\r\nglobal.auth = {\r\n  setToken,\r\n  getToken,\r\n  getUser,\r\n  isLogin,\r\n  logout\r\n};\r\n"]},"metadata":{},"sourceType":"module"}