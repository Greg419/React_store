{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\f7404\\\\Desktop\\\\react-store\\\\src\\\\pages\\\\Register.js\";\nimport React from \"react\";\nimport axios from \"commons/axios\";\nimport { useForm } from \"react-hook-form\";\nimport { toast } from \"react-toastify\";\nexport default function Login(props) {\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm(); // initialise the hook\n\n  const onSubmit = async data => {\n    // 有 register 的標籤.value 都會被包在data傳遞進來\n    // 3. 處理註冊邏輯\n    try {\n      const {\n        nickname,\n        email,\n        password\n      } = data; // 等待 json server 的 post 端口驗證 email 與 password 後, 回傳一組 Token\n\n      const res = await axios.post(\"/auth/register\", {\n        nickname,\n        email,\n        password,\n        type: 0\n      });\n      const jwToken = res.data;\n      global.auth.setToken(jwToken); // 登入成功後 將 Token 存到 localStorage\n\n      toast.success(\"Register Successed\"); // 4.跳轉到首頁視圖\n\n      props.history.push(\"/\");\n    } catch (error) {\n      const message = error.response.data.message;\n      toast.error(message);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"login-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"box login-box\",\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"title has-text-centered\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Register\"), React.createElement(\"label\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Nickname\"), React.createElement(\"div\", {\n    className: \"control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: `input ${errors.nickname && \"is-danger\"}`,\n    type: \"text\",\n    placeholder: \"Nickname\" // 將 name 的值, 設定與 State 的屬性名稱相同, 才好動態命名\n    ,\n    name: \"nickname\" // React-Hook-Form 套件解構的元件: register, handleSubmit, errors\n    // 標籤 register 後可設置許多屬性, 如 required, pattern ...\n    ,\n    ref: register({\n      required: {\n        // 不可為空\n        message: \"nickname is required\"\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }), errors.nickname && React.createElement(\"p\", {\n    className: \"helper has-text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, errors.nickname.message))), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Email\"), React.createElement(\"div\", {\n    className: \"control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: `input ${errors.email && \"is-danger\"}`,\n    type: \"text\",\n    placeholder: \"Email\" // 將 name 的值, 設定與 State 的屬性名稱相同, 才好動態命名\n    ,\n    name: \"email\" // React-Hook-Form 套件解構的元件: register, handleSubmit, errors\n    // 標籤 register 後可設置許多屬性, 如 required, pattern ...\n    ,\n    ref: register({\n      required: {\n        // 不可為空\n        message: \"email is required\"\n      },\n      pattern: {\n        // 限制條件\n        value: /^([A-Za-z0-9])+([_\\\\.][A-Za-z0-9]+)*@([A-Za-z0-9\\\\-]+\\.)+[A-Za-z]{2,6}$/,\n        message: \"invalid email\"\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), errors.email && React.createElement(\"p\", {\n    className: \"helper has-text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, errors.email.message))), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Password\"), React.createElement(\"div\", {\n    className: \"control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: `input ${errors.password && \"is-danger\"}`,\n    type: \"password\",\n    placeholder: \"Password\",\n    name: \"password\",\n    ref: register({\n      required: {\n        // 不可為空\n        message: \"password is required\"\n      },\n      minLength: {\n        // 最小長度\n        value: 6,\n        message: \"cannt be less than 6 digitals\"\n      }\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), errors.password && React.createElement(\"p\", {\n    className: \"helper has-text-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, errors.password.message))), React.createElement(\"div\", {\n    className: \"control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"button is-fullwidth is-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Submit\"))));\n}","map":{"version":3,"sources":["C:/Users/f7404/Desktop/react-store/src/pages/Register.js"],"names":["React","axios","useForm","toast","Login","props","register","handleSubmit","errors","onSubmit","data","nickname","email","password","res","post","type","jwToken","global","auth","setToken","success","history","push","error","message","response","required","pattern","value","minLength"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"commons/axios\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport default function Login(props) {\r\n  const { register, handleSubmit, errors } = useForm(); // initialise the hook\r\n\r\n  const onSubmit = async data => {\r\n    // 有 register 的標籤.value 都會被包在data傳遞進來\r\n    // 3. 處理註冊邏輯\r\n    try {\r\n      const { nickname, email, password } = data;\r\n      // 等待 json server 的 post 端口驗證 email 與 password 後, 回傳一組 Token\r\n      const res = await axios.post(\"/auth/register\", {\r\n        nickname,\r\n        email,\r\n        password,\r\n        type: 0\r\n      });\r\n      const jwToken = res.data;\r\n      global.auth.setToken(jwToken); // 登入成功後 將 Token 存到 localStorage\r\n      toast.success(\"Register Successed\");\r\n      // 4.跳轉到首頁視圖\r\n      props.history.push(\"/\");\r\n    } catch (error) {\r\n      const message = error.response.data.message;\r\n      toast.error(message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-wrapper\">\r\n      <form className=\"box login-box\" onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"field\">\r\n          <p className=\"title has-text-centered\">Register</p>\r\n          <label className=\"label\">Nickname</label>\r\n          <div className=\"control\">\r\n            <input\r\n              className={`input ${errors.nickname && \"is-danger\"}`}\r\n              type=\"text\"\r\n              placeholder=\"Nickname\"\r\n              // 將 name 的值, 設定與 State 的屬性名稱相同, 才好動態命名\r\n              name=\"nickname\"\r\n              // React-Hook-Form 套件解構的元件: register, handleSubmit, errors\r\n              // 標籤 register 後可設置許多屬性, 如 required, pattern ...\r\n              ref={register({\r\n                required: {\r\n                  // 不可為空\r\n                  message: \"nickname is required\"\r\n                }\r\n              })}\r\n            />\r\n            {errors.nickname && (\r\n              <p className=\"helper has-text-danger\">\r\n                {errors.nickname.message}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"field\">\r\n          <label className=\"label\">Email</label>\r\n          <div className=\"control\">\r\n            <input\r\n              className={`input ${errors.email && \"is-danger\"}`}\r\n              type=\"text\"\r\n              placeholder=\"Email\"\r\n              // 將 name 的值, 設定與 State 的屬性名稱相同, 才好動態命名\r\n              name=\"email\"\r\n              // React-Hook-Form 套件解構的元件: register, handleSubmit, errors\r\n              // 標籤 register 後可設置許多屬性, 如 required, pattern ...\r\n              ref={register({\r\n                required: {\r\n                  // 不可為空\r\n                  message: \"email is required\"\r\n                },\r\n                pattern: {\r\n                  // 限制條件\r\n                  value: /^([A-Za-z0-9])+([_\\\\.][A-Za-z0-9]+)*@([A-Za-z0-9\\\\-]+\\.)+[A-Za-z]{2,6}$/,\r\n                  message: \"invalid email\"\r\n                }\r\n              })}\r\n            />\r\n            {errors.email && (\r\n              <p className=\"helper has-text-danger\">{errors.email.message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"field\">\r\n          <label className=\"label\">Password</label>\r\n          <div className=\"control\">\r\n            <input\r\n              className={`input ${errors.password && \"is-danger\"}`}\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              name=\"password\"\r\n              ref={register({\r\n                required: {\r\n                  // 不可為空\r\n                  message: \"password is required\"\r\n                },\r\n                minLength: {\r\n                  // 最小長度\r\n                  value: 6,\r\n                  message: \"cannt be less than 6 digitals\"\r\n                }\r\n              })}\r\n            />\r\n            {errors.password && (\r\n              <p className=\"helper has-text-danger\">\r\n                {errors.password.message}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"control\">\r\n          <button className=\"button is-fullwidth is-primary\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}