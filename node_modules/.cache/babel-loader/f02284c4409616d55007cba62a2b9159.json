{"ast":null,"code":"import _axios from \"axios\";\n\nconst axios = baseURL => {\n  const instance = _axios.create({\n    baseURL: baseURL || process.env.REACT_APP_API_DOMAIN || \"http://localhost:3003\",\n    timeout: 1000\n  }); // You can intercept requests or responses before they are handled by then or catch.\n  // 對 instance 的 request 作攔截, 並加上導入 token 的邏輯\n\n\n  instance.interceptors.request.use(config => {\n    // config 即為上方我們自定義 axios 的整個配置\n    // 送出請求前, 所有頭部訊息都加上 token\n    const jwToken = global.auth.getToken();\n    config.headers[\"Authorization\"] = \"Bearer \" + jwToken;\n    return config;\n  }, error => {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n  return instance;\n}; // 可傳遞參數出去: 目前沒用到\n\n\nexport { axios };\nexport default axios();","map":{"version":3,"sources":["C:/Users/f7404/Desktop/react-store/src/commons/axios.js"],"names":["_axios","axios","baseURL","instance","create","process","env","REACT_APP_API_DOMAIN","timeout","interceptors","request","use","config","jwToken","global","auth","getToken","headers","error","Promise","reject"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,OAAnB;;AAEA,MAAMC,KAAK,GAAGC,OAAO,IAAI;AACvB,QAAMC,QAAQ,GAAGH,MAAM,CAACI,MAAP,CAAc;AAC7BF,IAAAA,OAAO,EACLA,OAAO,IAAIG,OAAO,CAACC,GAAR,CAAYC,oBAAvB,IAA+C,uBAFpB;AAG7BC,IAAAA,OAAO,EAAE;AAHoB,GAAd,CAAjB,CADuB,CAOvB;AACA;;;AACAL,EAAAA,QAAQ,CAACM,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACEC,MAAM,IAAI;AACR;AACA;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYC,QAAZ,EAAhB;AACAJ,IAAAA,MAAM,CAACK,OAAP,CAAe,eAAf,IAAkC,YAAYJ,OAA9C;AACA,WAAOD,MAAP;AACD,GAPH,EAQEM,KAAK,IAAI;AACP;AACA,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GAXH;AAaA,SAAOf,QAAP;AACD,CAvBD,C,CAyBA;;;AACA,SAASF,KAAT;AAEA,eAAeA,KAAK,EAApB","sourcesContent":["import _axios from \"axios\";\r\n\r\nconst axios = baseURL => {\r\n  const instance = _axios.create({\r\n    baseURL:\r\n      baseURL || process.env.REACT_APP_API_DOMAIN || \"http://localhost:3003\",\r\n    timeout: 1000\r\n  });\r\n\r\n  // You can intercept requests or responses before they are handled by then or catch.\r\n  // 對 instance 的 request 作攔截, 並加上導入 token 的邏輯\r\n  instance.interceptors.request.use(\r\n    config => {\r\n      // config 即為上方我們自定義 axios 的整個配置\r\n      // 送出請求前, 所有頭部訊息都加上 token\r\n      const jwToken = global.auth.getToken();\r\n      config.headers[\"Authorization\"] = \"Bearer \" + jwToken;\r\n      return config;\r\n    },\r\n    error => {\r\n      // Do something with request error\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  return instance;\r\n};\r\n\r\n// 可傳遞參數出去: 目前沒用到\r\nexport { axios };\r\n\r\nexport default axios();\r\n"]},"metadata":{},"sourceType":"module"}